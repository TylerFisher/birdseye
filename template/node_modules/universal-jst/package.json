{
  "author": {
    "name": "wookiehangover",
    "email": "sam@quickleft.com"
  },
  "contributors": [
    {
      "name": "filirom1",
      "email": "filirom1@gmail.com"
    }
  ],
  "name": "universal-jst",
  "description": "Pre-compiled JavaScript Templates",
  "version": "1.0.5",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "repository": {
    "type": "git",
    "url": "github.com:wookiehangover/handlebars-jst.git"
  },
  "dependencies": {
    "handlebars": "1.0.2beta",
    "jqtpl": "1.0.9",
    "underscore": "1.3.3",
    "async": "0.1.18",
    "coffee-script": "1.2.0",
    "watchr": "1.0.0",
    "glob": "3.1.9",
    "nopt": "1.0.10",
    "dustjs-linkedin": "0.4.0",
    "hogan.js": "2.0.0"
  },
  "devDependencies": {
    "vows": "~0.6.2"
  },
  "homepage": "https://github.com/wookiehangover/handlebars-jst",
  "main": "./lib/index",
  "scripts": {
    "test": "vows test/universalJstTest.js --spec"
  },
  "bin": {
    "jst": "./bin/jst.js"
  },
  "readme": "# Universal JST\n\nuniversal-jst: Pre-compiled JavaScript Templates (JST) with Node.js\n\nTransform a set of HTML or template files into javascript functions\nready to be used.\n\nThe following templates work:\n\n* [handlebars](http://handlebarsjs.com/)\n* [jquery-tmpl](http://api.jquery.com/jquery.tmpl/)\n* [underscore](http://documentcloud.github.com/underscore/#template)\n* [dust](http://akdubya.github.com/dustjs/)\n* [mustache with hogan](http://twitter.github.com/hogan.js/)\n* string ( useful for svg, or for templates to be compiled later on client side )\n\n\n##Â Quick-start:\n\n    jst --template handlebars templates/ javascripts/templates.js\n\nEdit your index.html, and add:\n\n    <script src=\"lib/handlebars.runtime-1.0.0.beta.6.js\"></script>\n    <script src=\"javascripts/templates.js\"></script>\n\nIn your javascript application, use the compiled templates this way:\n\n    var data = { title: \"foobar\" },\n        compiled_template = window.JST.sample_template( my_data );\n\n    $('body').html( compiled_template );\n\nFor more examples, look at the [example](universal-jst/tree/master/example) folder.\n\n## Install\n\n    npm install -g universal-jst\n\nOr from sources\n\n    git clone https://github.com/wookiehangover/universal-jst.git universal-jst\n    cd universal-jst\n    npm install -g\n\n## CLI usage\n\nuniversal-jst comes with a command line tool.\n\n    $ jst --template [template-engine] [path/to/templates] > [path/to/output]\n\nor\n\n    $ jst --template [template_engine] [path/to/templates] [path/to/output]\n\nUsage :\n\n    $ jst [--template format: string|underscore|_|jquery-tmpl|handlebars|hbs|dust|hogan|mustache|mu] [INPUT_DIR] [OUTPUT?]\n\n      --template -t    format : string|underscore|_|jquery-tmpl|handlebars|hbs|dust|hogan|mustache|mu\n      --inputdir -i    directory containings the templates to compile                                    $PWD\n      --output -o      output where templates will be compiled\n      --watch -w       watch `inputdir` for change                                                       false\n      --namespace -ns  object in the browser containing the templates                                    window.JST\n      --include -I     Glob patterns for templates files to include in `inputdir`                        **/*\n      --stdout -s      Print the result in stdout instead of writing in a file                           false\n      --verbose -v     Print logs for debug                                                              false\n\n\n## Node usage.\n\nUniversal-JST export a list of engines.\n\n    require('universal-jst')\n    {\n      handlebars: [Function: build],\n      string: [Function: build],\n      _: [Function: build],\n      hbs: [Function: build],\n      'jquery-tmpl': [Function: build],\n      underscore: [Function: build],\n      dust: [Function: build],\n      mu: [Function: build],\n      mustache: [Function: build],\n      hogan: [Function: build]\n    }\n\nJust choose your engine and use it:\n\n    var engines = require('universal-jst')\n    engines.hbs('./example/handlebars/templates/', function(err, data){\n      console.log(data.join('\\n'));\n    });\n\nBe aware that the result data is an array. You can filter this array if\nyou want or just use the whole result by using `data.join('\\n')`.\n\n\n## JST Output\n\nTo start using the compiled templates, just include `templates.js`. Keep\nin mind that these are just your templates, so you'll also need your templates dependencies in there too.\n\n`templates.js` creates a global object called `window.JST`.\n\nThe `JST` object includes a `templates` object containing all of your\nprecompiled templates:\n\n    JST = {\n      <template_name>,\n      <template_name_2>,\n      ...\n    }\n\nThe helper methods are meant to make using templates as easy as\npossible, so they are functions that take JSON data to be templated as\nthe only argument.\n\nThe functions themselves look like this:\n\n      JST.<file_name> = function( data ){\n        return $.tmpl( JST.template.<file_name>, data );\n      }\n\nAnd it's final usage would look something like this:\n\n      var data = { title: \"foobar\" },\n          compiled_template = window.JST.sample_template( my_data );\n\n      $('body').html( compiled_template );\n\n\n## Multiple Named Templates from a single file\n\nAdd as many sub-templates as you want to a single JST file by writing a\nc-style comment with the sub-template name.\n\n    multiple_templates.JST\n    ---\n    <hi>Nothing to see here</h1>\n\n    /* foo */\n    <h2>{foo}</h2>\n    <p>Check out this other awesome template<p>\n\nThis file will product 2 templates:\n\n    JST = {\n      multiple_templates: function(){ /* */},\n      multiple_templates_foo: function(){ /* */}\n    }\n\n## Templates in a subdirectory\n\nIf you specify a recursive glob pattern (by default) : `**/*`, then\ntemplates in subfolders will be compiled too.\n\n    JST = {\n      \"sub/folder/template\": function(){ /* */},\n      \"sub/sub/folder/template\": function(){ /* */}\n    }\n\nThe path separator is a `/`, so to get the template, use the hook\nnotation.\n\n    JST[\"sub/folder/template\"]\n\n## Template engine options\n\nEach template engine is different, and may be configured via options.\n\n### Dust.js\n\nPartials are working. Look at this example [helper](universal-jst/tree/master/example/dust/templates/partials.dust)\n\n### Handlebars\n\nPartials are working. Each template is also a partial, i.e. `Handlebars.partials == window.JST`\n\n`--helpers /path/to/a/dir/containing/helpers` look at this example [helper](universal-jst/tree/master/example/handlebars/helpers), [template](universal-jst/tree/master/example/handlebars/templates/helpers.hbs)\n\n### Underscore\n\n`--evaluate`, `--interpolate`, `--escape` are accepted. Those strings will be transformed into a new RegExp\n\n\n## Contributing\n\nThis is a need-based project, so I only wrote it to account for my\nneeds as of right now.\n\nIf you've got any suggestestions, opinions, optimizations or fixes,\nplease fork and pull request to contribute.\n\nEverything original is MIT, everything else honors whatever license it\nwas written under.\n",
  "readmeFilename": "readme.md",
  "_id": "universal-jst@1.0.5",
  "dist": {
    "shasum": "ca4a7ef5bd00d2dcc749a38bd1e12f23d89953de",
    "tarball": "http://registry.npmjs.org/universal-jst/-/universal-jst-1.0.5.tgz"
  },
  "_npmVersion": "1.1.65",
  "_npmUser": {
    "name": "filirom1",
    "email": "filirom1@gmail.com"
  },
  "maintainers": [
    {
      "name": "Filirom1",
      "email": "filirom1@gmail.com"
    },
    {
      "name": "wookiehangover",
      "email": "sam@quickleft.com"
    },
    {
      "name": "filirom1",
      "email": "filirom1@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "ca4a7ef5bd00d2dcc749a38bd1e12f23d89953de",
  "_resolved": "https://registry.npmjs.org/universal-jst/-/universal-jst-1.0.5.tgz",
  "_from": "universal-jst@>=1.0.5 <1.1.0",
  "bugs": {
    "url": "https://github.com/wookiehangover/handlebars-jst/issues"
  }
}
