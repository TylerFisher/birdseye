{"version":"0.2.8","files":{"/Users/jdemorai/projects/dust-Linkedin/dustjs/test/uutest.js":{"stats":{"percentage":0.5192307692307693,"lines":[{"lineno":4},{"lineno":5},{"lineno":6},{"lineno":7},{"lineno":11},{"lineno":12},{"lineno":13},{"lineno":16},{"lineno":18},{"lineno":23},{"lineno":24},{"lineno":25},{"lineno":26},{"lineno":31},{"lineno":35},{"lineno":36},{"lineno":40},{"lineno":41},{"lineno":47},{"lineno":48},{"lineno":49},{"lineno":53},{"lineno":54},{"lineno":56},{"lineno":57},{"lineno":58},{"lineno":60},{"lineno":62},{"lineno":63},{"lineno":68},{"lineno":69},{"lineno":70},{"lineno":71},{"lineno":72},{"lineno":73},{"lineno":74},{"lineno":75},{"lineno":80},{"lineno":81},{"lineno":82},{"lineno":83},{"lineno":84},{"lineno":88},{"lineno":90},{"lineno":97},{"lineno":98},{"lineno":99},{"lineno":100},{"lineno":101},{"lineno":104}],"missing":50,"seen":54,"total":104,"coverage":{"4":{"partial":false,"source":"  this.id = id;","missing":[{"startCol":2,"endCol":15}]},"5":{"partial":false,"source":"  this.test = test;","missing":[{"startCol":2,"endCol":19}]},"6":{"partial":false,"source":"  this.callback = callback;","missing":[{"startCol":2,"endCol":27}]},"7":{"partial":false,"source":"  this.timeout = timeout;","missing":[{"startCol":2,"endCol":25}]},"11":{"partial":false,"source":"  var self = this;","missing":[{"startCol":2,"endCol":18}]},"12":{"partial":false,"source":"  self.timer = setTimeout(function() {","missing":[{}]},"13":{"partial":false,"source":"    self.fail(new Error(\"TimeoutError\"));","missing":[{"startCol":4,"endCol":41},{}]},"14":{"partial":false,"source":"  }, self.timeout);","missing":[{}]},"16":{"partial":false,"source":"    self.test.call(self);","missing":[{"startCol":4,"endCol":24}]},"18":{"partial":false,"source":"    self.fail(err);","missing":[{"startCol":4,"endCol":18}]},"23":{"partial":false,"source":"  if (actual !== expected) {","missing":[{"startCol":6,"endCol":25}]},"24":{"partial":false,"source":"    var err = new Error();","missing":[{"startCol":4,"endCol":26}]},"25":{"partial":false,"source":"    if (message) err.message = message;","missing":[{"startCol":17,"endCol":39}]},"26":{"partial":false,"source":"    throw wrapAssertionError(err, actual, expected, \"===\");","missing":[{"startCol":4,"endCol":59},{"startCol":10,"endCol":58}]},"31":{"partial":false,"source":"  if (err) throw err;","missing":[{"startCol":11,"endCol":21}]},"35":{"partial":false,"source":"  clearTimeout(this.timer);","missing":[{"startCol":2,"endCol":26}]},"36":{"partial":false,"source":"  this.callback();","missing":[{"startCol":2,"endCol":17}]},"40":{"partial":false,"source":"  clearTimeout(this.timer);","missing":[{"startCol":2,"endCol":26}]},"41":{"partial":false,"source":"  this.callback(err);","missing":[{"startCol":2,"endCol":20}]},"47":{"partial":false,"source":"  this.options = options || {};","missing":[{"startCol":2,"endCol":31},{"startCol":17,"endCol":30}]},"48":{"partial":false,"source":"  this.timeout = options.timeout || 1000;","missing":[{"startCol":2,"endCol":41},{"startCol":17,"endCol":40}]},"49":{"partial":false,"source":"  this.tests = [];","missing":[{"startCol":2,"endCol":18}]},"53":{"partial":false,"source":"  var self = this;","missing":[{"startCol":2,"endCol":18}]},"54":{"partial":false,"source":"  self.tests.push(new Test(name, fn, self.timeout, function(err) {","missing":[{}]},"55":{"partial":false,"source":"    if (err) {","missing":[{}]},"56":{"partial":false,"source":"      err.testName = name;","missing":[{},{"startCol":6,"endCol":26}]},"57":{"partial":false,"source":"      self.errors.push(err);","missing":[{},{"startCol":6,"endCol":28}]},"58":{"partial":false,"source":"      self.emit(\"fail\", err);","missing":[{},{"startCol":6,"endCol":28}]},"59":{"partial":false,"source":"    } else {","missing":[{}]},"60":{"partial":false,"source":"      self.emit(\"pass\", name);","missing":[{},{"startCol":6,"endCol":29}]},"61":{"partial":false,"source":"    }","missing":[{}]},"62":{"partial":false,"source":"    self.pending--;","missing":[{"startCol":4,"endCol":18},{}]},"63":{"partial":false,"source":"    self.check();","missing":[{},{"startCol":4,"endCol":16}]},"64":{"partial":false,"source":"  }));","missing":[{}]},"68":{"partial":false,"source":"  if (this.pending) return;","missing":[{"startCol":20,"endCol":27}]},"69":{"partial":false,"source":"  var self = this, len = self.tests.length;","missing":[{"startCol":2,"endCol":43}]},"70":{"partial":false,"source":"  self.errors = [];","missing":[{"startCol":2,"endCol":19}]},"71":{"partial":false,"source":"  self.emit(\"start\", self.tests);","missing":[{"startCol":2,"endCol":32}]},"72":{"partial":false,"source":"  self.start = new Date().getTime();","missing":[{"startCol":2,"endCol":36},{"startCol":15,"endCol":35}]},"73":{"partial":false,"source":"  self.pending = len;","missing":[{"startCol":2,"endCol":21}]},"74":{"partial":false,"source":"  for (var i=0; i<len; i++) {","missing":[{"startCol":16,"endCol":21},{"startCol":23,"endCol":26}]},"75":{"partial":false,"source":"    self.tests[i].run();","missing":[{"startCol":4,"endCol":23}]},"80":{"partial":false,"source":"  if (this.pending) return;","missing":[{"startCol":20,"endCol":27}]},"81":{"partial":false,"source":"  var len = this.tests.length,","missing":[{}]},"82":{"partial":false,"source":"      passed = len - this.errors.length,","missing":[{},{"startCol":15,"endCol":39}]},"83":{"partial":false,"source":"      failed = len - passed;","missing":[{},{"startCol":15,"endCol":27}]},"84":{"partial":false,"source":"  this.emit(\"done\", passed, failed, new Date().getTime() - this.start);","missing":[{"startCol":2,"endCol":70},{"startCol":36,"endCol":56}]},"88":{"partial":false,"source":"  var event = this.options[type];","missing":[{"startCol":2,"endCol":33}]},"90":{"partial":false,"source":"    event.apply(this, Array.prototype.slice.call(arguments, 1));","missing":[{"startCol":4,"endCol":63},{"startCol":22,"endCol":62}]},"97":{"partial":false,"source":"  err.name = \"AssertionError\";","missing":[{"startCol":2,"endCol":30}]},"98":{"partial":false,"source":"  err.actual = actual;","missing":[{"startCol":2,"endCol":22}]},"99":{"partial":false,"source":"  err.expected = expected;","missing":[{"startCol":2,"endCol":26}]},"100":{"partial":false,"source":"  err.operator = operator;","missing":[{"startCol":2,"endCol":26}]},"101":{"partial":false,"source":"  return err;","missing":[{"startCol":2,"endCol":13}]},"104":{"partial":true,"source":"})(typeof exports !== 'undefined' ? exports : window.uutest = {});","missing":[{"startCol":46,"endCol":64}]}},"source":"(function(uutest){\n\nfunction Test(id, test, timeout, callback) {\n  this.id = id;\n  this.test = test;\n  this.callback = callback;\n  this.timeout = timeout;\n}\n\nTest.prototype.run = function() {\n  var self = this;\n  self.timer = setTimeout(function() {\n    self.fail(new Error(\"TimeoutError\"));\n  }, self.timeout);\n  try {\n    self.test.call(self);\n  } catch(err) {\n    self.fail(err);\n  }\n}\n\nTest.prototype.equals = function(actual, expected, message) {\n  if (actual !== expected) {\n    var err = new Error();\n    if (message) err.message = message;\n    throw wrapAssertionError(err, actual, expected, \"===\");\n  }\n}\n\nTest.prototype.ifError = function(err) {\n  if (err) throw err;\n}\n\nTest.prototype.pass = function() {\n  clearTimeout(this.timer);\n  this.callback();\n}\n\nTest.prototype.fail = function(err) {\n  clearTimeout(this.timer);\n  this.callback(err);\n}\n\nuutest.Test = Test;\n\nfunction Suite(options) {\n  this.options = options || {};\n  this.timeout = options.timeout || 1000;\n  this.tests = [];\n}\n\nSuite.prototype.test = function(name, fn) {\n  var self = this;\n  self.tests.push(new Test(name, fn, self.timeout, function(err) {\n    if (err) {\n      err.testName = name;\n      self.errors.push(err);\n      self.emit(\"fail\", err);\n    } else {\n      self.emit(\"pass\", name);\n    }\n    self.pending--;\n    self.check();\n  }));\n}\n\nSuite.prototype.run = function() {\n  if (this.pending) return;\n  var self = this, len = self.tests.length;\n  self.errors = [];\n  self.emit(\"start\", self.tests);\n  self.start = new Date().getTime();\n  self.pending = len;\n  for (var i=0; i<len; i++) {\n    self.tests[i].run();\n  }\n}\n\nSuite.prototype.check = function() {\n  if (this.pending) return;\n  var len = this.tests.length,\n      passed = len - this.errors.length,\n      failed = len - passed;\n  this.emit(\"done\", passed, failed, new Date().getTime() - this.start);\n}\n\nSuite.prototype.emit = function(type) {\n  var event = this.options[type];\n  if (event) {\n    event.apply(this, Array.prototype.slice.call(arguments, 1));\n  }\n}\n\nuutest.Suite = Suite;\n\nfunction wrapAssertionError(err, actual, expected, operator) {\n  err.name = \"AssertionError\";\n  err.actual = actual;\n  err.expected = expected;\n  err.operator = operator;\n  return err;\n}\n\n})(typeof exports !== 'undefined' ? exports : window.uutest = {});","blocks":{"total":26,"seen":1,"missing":25,"percentage":0.038461538461538464}},"hash":"0228200b5f18ec884bea987291e220ba"}}}